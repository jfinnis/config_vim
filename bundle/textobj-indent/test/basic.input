" Common set up  "{{{1

runtime! plugin/textobj/*.vim




function s:describe__global_variables()  "{{{1
  It "Check global variables"

  Should exists('g:loaded_textobj_indent') be true
endfunction




function s:describe__named_key_mappings()  "{{{1
  It "Check the existence of the named key mappings in each mode"

  for _ in ['<Plug>(textobj-indent-a)',
  \         '<Plug>(textobj-indent-i)',
  \         '<Plug>(textobj-indent-same-a)',
  \         '<Plug>(textobj-indent-same-i)']
    execute "Should maparg(".string(_).", 'c') == ''"
    execute "Should maparg(".string(_).", 'i') == ''"
    execute "Should maparg(".string(_).", 'n') == ''"
    execute "Should maparg(".string(_).", 'o') != ''"
    execute "Should maparg(".string(_).", 'v') != ''"
  endfor
endfunction




function s:describe__default_key_mappings()  "{{{1
  It "Check the definitions of the default key mappings in each mode"

  Should maparg('ai', 'c') ==# ''
  Should maparg('ai', 'i') ==# ''
  Should maparg('ai', 'n') ==# ''
  Should maparg('ai', 'o') ==# '<Plug>(textobj-indent-a)'
  Should maparg('ai', 'v') ==# '<Plug>(textobj-indent-a)'
  Should maparg('ii', 'c') ==# ''
  Should maparg('ii', 'i') ==# ''
  Should maparg('ii', 'n') ==# ''
  Should maparg('ii', 'o') ==# '<Plug>(textobj-indent-i)'
  Should maparg('ii', 'v') ==# '<Plug>(textobj-indent-i)'
  Should maparg('aI', 'c') ==# ''
  Should maparg('aI', 'i') ==# ''
  Should maparg('aI', 'n') ==# ''
  Should maparg('aI', 'o') ==# '<Plug>(textobj-indent-same-a)'
  Should maparg('aI', 'v') ==# '<Plug>(textobj-indent-same-a)'
  Should maparg('iI', 'c') ==# ''
  Should maparg('iI', 'i') ==# ''
  Should maparg('iI', 'n') ==# ''
  Should maparg('iI', 'o') ==# '<Plug>(textobj-indent-same-i)'
  Should maparg('iI', 'v') ==# '<Plug>(textobj-indent-same-i)'
endfunction




function s:describe__select_a()  "{{{1
  It "<Plug>(textobj-indent-a)"

  tabnew
  tabonly!

  silent put =[
  \   'if some_condition_is_satisfied',
  \   '  if another_condition_is_satisfied',
  \   '    call s:special_stuff()',
  \   '  endif',
  \   '  call s:normal_stuff()',
  \   '',
  \   '  ...',
  \   '  endif',
  \   'else',
  \   '  ...',
  \   'endif',
  \ ]
  1 delete _
  normal! 4G

  execute "normal v\<Plug>(textobj-indent-a)\<Esc>"
  Should [line("'<"), col("'<")] ==# [2, 1]
  Should [line("'>"), col("'>")] ==# [8, 8]

  execute "silent normal y\<Plug>(textobj-indent-a)"
  Should [line("'["), col("'[")] ==# [2, 1]
  Should [line("']"), col("']")] ==# [8, 8]
endfunction




function s:describe__select_i()  "{{{1
  It "<Plug>(textobj-indent-i)"

  tabnew
  tabonly!

  silent put =[
  \   'if some_condition_is_satisfied',
  \   '  if another_condition_is_satisfied',
  \   '    call s:special_stuff()',
  \   '  endif',
  \   '  call s:normal_stuff()',
  \   '',
  \   '  ...',
  \   '  endif',
  \   'else',
  \   '  ...',
  \   'endif',
  \ ]
  1 delete _
  normal! 4G

  execute "normal v\<Plug>(textobj-indent-i)\<Esc>"
  Should [line("'<"), col("'<")] ==# [2, 1]
  Should [line("'>"), col("'>")] ==# [5, 24]

  execute "silent normal y\<Plug>(textobj-indent-i)"
  Should [line("'["), col("'[")] ==# [2, 1]
  Should [line("']"), col("']")] ==# [5, 24]
endfunction




function s:describe__select_same_a()  "{{{1
  It "<Plug>(textobj-indent-same-a)"

  tabnew
  tabonly!

  silent put =[
  \   'if some_condition_is_satisfied',
  \   '  if another_condition_is_satisfied',
  \   '    call s:special_stuff()',
  \   '  endif',
  \   '  call s:normal_stuff()',
  \   '',
  \   '  ...',
  \   '  endif',
  \   'else',
  \   '  ...',
  \   'endif',
  \ ]
  1 delete _
  normal! 4G

  execute "normal v\<Plug>(textobj-indent-same-a)\<Esc>"
  Should [line("'<"), col("'<")] ==# [4, 1]
  Should [line("'>"), col("'>")] ==# [8, 8]

  execute "silent normal y\<Plug>(textobj-indent-same-a)"
  Should [line("'["), col("'[")] ==# [4, 1]
  Should [line("']"), col("']")] ==# [8, 8]
endfunction




function s:describe__select_same_i()  "{{{1
  It "<Plug>(textobj-indent-same-i)"

  tabnew
  tabonly!

  silent put =[
  \   'if some_condition_is_satisfied',
  \   '  if another_condition_is_satisfied',
  \   '    call s:special_stuff()',
  \   '  endif',
  \   '  call s:normal_stuff()',
  \   '',
  \   '  ...',
  \   '  endif',
  \   'else',
  \   '  ...',
  \   'endif',
  \ ]
  1 delete _
  normal! 4G

  execute "normal v\<Plug>(textobj-indent-same-i)\<Esc>"
  Should [line("'<"), col("'<")] ==# [4, 1]
  Should [line("'>"), col("'>")] ==# [5, 24]

  execute "silent normal y\<Plug>(textobj-indent-same-i)"
  Should [line("'["), col("'[")] ==# [4, 1]
  Should [line("']"), col("']")] ==# [5, 24]
endfunction




" __END__  "{{{1
" vim: filetype=vim foldmethod=marker
