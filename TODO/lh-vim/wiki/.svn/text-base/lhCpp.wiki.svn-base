#summary lh-cpp: LH's C&C++ ftplugins suite
#labels Featured,lh-cpp

= Features =

lh-cpp is an heterogeneous suite of helpers for C and C++ programming.

It provides the following things:
  * Smart snippets for [lhCpp#Brackets brackets pairs], [lhCpp#Code_snippets control statements]
  * a few [#Templates templates]
  * a few [#Wizards_and_other_high-level_features advanced wizards, and high-level features] to Generate classes and singletons, to Generate ready to fill-in function comments for Doxygen, Jump to a function implementation, Search for un-implemented or undeclared functions, _etc._
  * [lhCpp#Syntax_highlighting syntax highlighting] for identified counter-idioms and bad practices (catch by value, assignments in conditions, throw specifications)
  * an [lhCpp#API API] to build even more complex wizards and advanced features

== Text insertion facilities ==


=== Brackets ===

The insertion of pair of brackets-like characters is eased thanks to [lhBrackets map-tool].
|| *In mode*            || *INSERT*               || *VISUAL*                || *NORMAL* ||
|| *keys*               || Expands into ..        || Surrounds the selection with ... ^2^ || Surrounds the current ... ||
|| (                    || `(<cursor>)«»`     || `(<selection>)`       || word ||
|| [                    || `[<cursor>]«»`     || ^1^                       || ^1^  ||
|| `<localleader>[`     ||                        || `[<selection>]`       || word ||
|| {                    || `{\n<cursor>\n}«»` || `{<selection>}`       || word ||
|| #{                   || `{<cursor>}«»`     ||                           ||      ||
|| `<localleader>{`     ||                        || `{\n<selection>\n}«»` || line ||
|| < || `<<cursor>>«»` after `#include`, or `template` on the same line || || ||
|| " (1 double quote)   || `"<cursor>"«»`     || ^1^                       || ^1^  ||
|| ""                   ||                        || `"<selection>"`       || word ||
|| '                    || `'<cursor>'«»`     || ^1^                       || ^1^  ||
|| '' (2 single quotes) ||                        || `'<selection>'`       || word ||

====Notes:====
 * ^1^ Not defined to avoid hijacking default vim key bindings.
 * ^2^ The visual mode mappings do not surround the current marker/placeholder selected, but trigger the INSERT-mode mappings instead.
 * `«»` represents a marker/placeholder, it may be expanded with other characters like `<++>` depending on your preferences.
 * There is no way (yet) to deactivate this feature from the `.vimrc`



=== Code snippets ===

==== INSERT-mode snippets abbreviations ====
There exist, over the WWW, a lot of configurations and mappings regarding C programming. Once again you will find shortcuts for `if`, `else`, `elif`  (I know it is not a C keyword, but `else if` are), `for`, `while`, `do`, `switch`, and `main`. In C++, snippets are also provided for `try`, `catch`, and `namespace`.
What is unique is the fact that when you type `if` in insert mode, it will automatically expand into ...
{{{
if () {
} 
}}}
... in respect of the context. I.e.: within comments or strings (delimited by single or double quotes) `if` is not expanded. If keyword characters precede the typing, `if` is not expanded as well. Thus variables like `tarif` can be used without getting any headache.


Most of these same snippets, and a few variations, are also provided as template-files for [muTemplate mu-template]. This time, you just need to type the first letters of the snippet/template name, and trigger the expansion (with `<c-r><tab>` by default). If several snippets match (like _c/for_, _c/fori_, _cpp/fori_ and _cpp/for-iterator_ when you try to expand `fo`), mu-template will ask you to choose which (matching) snippet you want to expand.

==== Instruction surrounding mappings ====
In visual mode, `,if` wraps the selection within the curly brackets and inserts `if ()` just before. In normal mode `,if` does the same thing under the consideration that the selection is considered to be the current line under the cursor. Actually, it is not `,if` but `<LocalLeader>if,` with `maplocalleader` assigned by default to the coma `,`.

==== Expression-condition surrounding mappings ====
In the same idea, `<LocalLeader><LocalLeader>if` surrounds the selection with `if (` and `) {\n«»\n}«»`.

==== Other notes ====
All the three mode oriented mappings respect and force the indentation regarding the current setting and what was typed.

More precisely, regarding the value of the buffer relative option b:usemarks (_cf._ [lhBrackets map-tools]), `if` could be expanded into:
{{{
if () {
    «»
}«»
}}}

=== Miscellaneous shortcuts ===
 * `tpl` expands into `template <<cursor>>«»` ;
 * `<m-t>` inserts `typedef`, or `typename` depending on what is before the cursor ;
 * `<m-r>` inserts `return`, and tries to correctly place the semicolon, and a placeholder, depending on what follows the cursor ;
 * `<c-x>be`, `<c-x>rbe` replace `(foo<cursor>)` with `(foo.begin(),foo.end()<cursor>)` (or `rbegin`/`rend`) ;
 * `<c->se`: attempt to fill-in a `switch-case` from an enumerated type ;
 * `,sc` | `,dc` | `,rc` | `,cc` surround the selection with ; `static_cast<<cursor>>(<selection>)`, `dynamic_cast`, `reinterpret_cast`, or `const_cast` ;
 * `,,sc` | `,,dc` | `,,rc` | `,,cc` try to convert the C-cast selected into the C++-cast requested ;
 * `#d` expands into `#define`, `#i` into `#ifdef`, `#e` into `endif`, `#n` into `#include` ; 
 * `,0` surrounds the selected lines with `#if 0 ... #endif` ;
 * `pub` expands into `public:\n`, `pro` expands into `protected:\n`, `pri` expands into `private:\n` ;
 * `vir` expands into `virtual` ;
 * `firend` is replaced by `friend` ;
 * `<m-s>` inserts `std::`, `<m-b>` inserts `boost:` ;
 * `?:` expands into `<cursor>? «» : «»;` ;

=== Templates ===
 * stream inserters, stream extractor
 * bool operator: almost portable hack to provide a boolean operator, strongly inspired by Matthew Wilson's _Imperfect C++_.
 * Generation of [lhCpp_Enums enums], and of switch-case statements from enum definition.

=== Wizards and other high-level features ===
 * [lhCpp_Class class]: builds a class skeleton based on the selected (simplified) semantics (value copyable, stack-based non copyable, entity non-copyable, entity clonable)
 * [lhCpp_Singleton singleton]: my very own way to define singletons based on my conclusions on this anti-pattern -- you may prefer Loki's or ACE's solutions
 * [lhCpp_Doxygen :DOX]: analyses a function signature (parameters, return type, throw specification) and provide a default Doxygenized documentation
 * [lhCpp_GotoImplementation :GOTOIMPL], :MOVETOIMPL: search and jump to a function definition from its declaration, provide a default one in the _ad'hoc_ implementation file if no definition is found
 * [lhCpp_Accessors :ADDATTRIBUTE]: old facility that helps define const-correct accessors and mutator, will be reworked.
 * [lhCpp_UmatchedFunctions :CppDisplayUnmatchedFunctions], `<c-x>u`: shows the list of functions for which there is neither a declaration, nor a definition
 * [lhCpp_Override :Override]: Ask which inherited virtual function should be overridden in the current class (feature still in its very early stages)

== Syntax highlighting ==
 * assign in condition (bad practice)
 * catch by value (bad practice)
 * throw specifications ([http://www.gotw.ca/gotw/082.htm do you really know what they are about, and still want them?])
 * function definitions 

== Miscellaneous ==
 * home like VC++: mappings that override `<home>` and `<end>` to mimic how these keys behave in VC++.
 * omap-param: defines the o-mappings `,i` and `,a` to select the current parameter (in a list of parameters.
 * a.vim, 
 * SiR, local_vimrc 

== API ==

= Download =
  * Requirements: Vim 7.+, [lhVimLib lh-vim-lib], [lhBrackets lh-map-tools] (take the 1.0.0 beta version from the subversion repository), [muTemplate mu-template]
  * With [https://github.com/MarcWeber/vim-addon-manager vim-addon-manager], install lh-cpp (this is the preferred method because of the [http://code.google.com/p/lh-vim/source/browse/cpp/trunk/lh-cpp-addon-info.txt dependencies]) 
  * As a vimball: [http://lh-vim.googlecode.com/files/lh-cpp-1.0.0.vba here] (not ready yet), or at [http://www.vim.org/scripts/script.php?script_id=336 Vim.org] (old version)
  * Checkout from the SVN repository
    {{{  
# Non-members may check out a read-only working copy anonymously over HTTP.
svn checkout http://lh-vim.googlecode.com/svn/cpp/trunk/ lh-cpp-read-only
    }}}

= Credits =

= See also =
 * [http://vim.wikia.com/wiki/Category:C%2B%2B C++ tips on vim.wikia]
 * c.vim
 * refactor.vim, [lhRefactor my generic refactoring plugin]
 * [http://www.vim.org/scripts/script.php?script_id=1520 OmniCppComplete], [https://github.com/Rip-Rip/clang_complete clang_complete]
 * [https://github.com/exclipy/clang_indexer clang_indexer]