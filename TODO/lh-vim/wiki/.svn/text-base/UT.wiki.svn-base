#summary UT: Unit Testing Framework for Vim
#labels Featured,beta,UT

= Introduction =

_UT_ is another Test Unit Framework for Vim, which main particularity is to fill the |quickfix| window with the assertion failures.

= Features =
  * Assertion failures are reported in the quickfix window
  * Assertion syntax is simple, check Tom Link's suite, it's the same
  * Supports banged `:Assert!` to stop processing a given test on failed assertions
  * All the `s:Test*` functions of a suite are executed (almost) independently (i.e., a critical `:Assert!` failure will stop the Test of the function, and `lh#UT` will proceed to the next `s:Test` function
  * Lightweight and simple to use: there is only one command defined, all the other definitions are kept in an autoload plugin.
  * A suite == a file
  * Several `s:TestXxx()` per suite
  * +optional `s:Setup()`, `s:Teardown()`
  * Supports `:Comments`
  * `s:LocalFunctions()`, `s:variables`, and `l:variables` are supported
  * Takes advantage of [BTW BuildToolsWrapper]'s `:COpen` command if installed
  * Count successful tests and not successful assertions
  * Short-cuts to run the Unit Tests associated to a given vim script; Relies on: [http://code.google.com/p/lh-vim/source/browse/misc/trunk/plugin/let-modeline.vim Let-Modeline]/[http://code.google.com/p/lh-vim/source/browse/misc/trunk/plugin/local_vimrc.vim local_vimrc]/[http://www.vim.org/scripts/script.php?script_id=69 Project] to set `g:UTfiles` (space separated list of glob-able paths), and on [lhVimLib `lh-vim-lib#path`]
  * Command to exclude, or specify the tests to play => `:UTPlay`, `UTIgnore`

=== Usage ===
  * Create a new vim script, it will be a Unit Testing Suite.
  * One of the first lines must contain
{{{
UTSuite Some intelligible name for the suite
}}}
  * Then you are free to directly assert anything you wish as long as it is a valid vim |expression|, e.g.
{{{
Assert 1 > 2
Assert 1 > 0
Assert s:foo > s:Bar(g:var + 28) / strlen("foobar")
}}}
  * or to define as many independent tests as you wish. A test is a function with a name starting with `s:Test`. Even if a test critically fails, the next test will be executed, e.g.
{{{
function s:Test1()
  let var = SomeFunction()
  Assert! type(var) == type(0)
  Assert var < 42
  Assert! var > 0 

  " Some other code that won't be executed if the previous assertion failed
  " /*the wiki does not recognizes vim comments*/
  let i = var / 42.0
  Comment This comment may never be displayed if {var} is negative or not a number
endfunction

function s:Test2()
  Assert s:what != Ever()
endfunction
}}}
  * If you wish to see a set-up function executed before each test, define the `s:Setup()` function.
  * If you wish to see a clean-up function executed after each test, define the `s:Teardown()` function.
  * Now run `:UTRun` of your test script (filename), and ... debug your failed assertions.

==== Examples ====
See:
  * [http://code.google.com/p/lh-vim/source/browse/UT/trunk/tests/lh/UT.vim tests/lh/UT.vim] for a classical test,
  * [http://code.google.com/p/lh-vim/source/browse/UT/trunk/tests/lh/UT-fixtures.vim tests/lh/UT-fixtures.vim] for a test with fixtures.


=== To Do ===
  * Add `&efm` for VimL errors like the one produced by `:Assert 0 + [0]`
  * Check UT works fine under windows (where paths have spaces, etc), and on UTF-8 files
  * Simplify `s:errors` functions
  * Merge with Tom Link's tAssert plugin? (the UI is quite different)
  * `:AssertEquals` that shows the name of both expressions and their values as well -- a correct distinction of both parameters will be tricky with regexes ; using functions will loose either the name, or the value in case of local/script variables use ; we need macros _Ã  la C_...
  * Support Embedded comments like for instance: 
{{{
Assert 1 == 1 " 1 must value 1
}}}
  * Ways to test buffers produced
  * Always execute s:Teardown() -- move its call to a :finally bloc
  * Find a way to prevent the potential script scope pollution


= Design Choices = 
  * The assertions supported by this plugin are expected to be made in a Unit Testing file, they are not to be used in regular VimL scripts as a _Design by Contract_ tool. Check Thomas Link's plugin, it is much more suited for that kind of assertions.

  * In order to be able to produce the quickfix entries, the plugin first parses the Unit Test file to complete all `:Assert` occurrences with extra information about the line number where the assertion is made.


= Download =
  * Requirements: Vim 7.1, [lhVimLib lh-vim-lib]
  * As a vimball: [http://lh-vim.googlecode.com/files/UT-0.0.3.vba here], or at [http://www.vim.org/scripts/script.php?script_id=??? Vim.org]
  * Checkout from the SVN repository
    {{{  
# Non-members may check out a read-only working copy anonymously over HTTP.
svn checkout http://lh-vim.googlecode.com/svn/UT/trunk/ UT-read-only
    }}}
  * Vim Addon Manager: [http://code.google.com/p/lh-vim/source/browse/UT/trunk/UT-addon-info.txt UT-addon-info.txt]

= Other Tests related plugins for Vim =
  * Tom Link's [http://www.vim.org/scripts/script.php?script_id=1730 tAssert plugin], and [https://github.com/tomtom/spec_vim spec_vim plugin],
  * Staale Flock's [http://www.vim.org/scripts/script.php?script_id=1125 vimUnit plugin],
  * Meikel Brandmeyer's [http://www.vim.org/scripts/script.php?script_id=2213 vimTAP plugin],
  * Ben Fritz's [http://code.google.com/p/vim-2html-test/ vim-2html-test] plugin,
  * Ingo Karkat's [http://www.vim.org/scripts/script.php?script_id=2565 runVimTests plugin],
  * See also Paul Mucur article's: [http://mudge.github.com/2012/04/18/testing-vim-plugins-on-travis-ci-with-rspec-and-vimrunner.html Testing Vim Plugins on Travis CI with RSpec and Vimrunner]