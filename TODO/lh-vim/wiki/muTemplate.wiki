#summary mu-template: template-files expander
#labels Featured,muTemplate

== Introduction ==

µTemplate is a template-files loader for Vim. Once loaded, templates are interpreted and expanded according to a flexible syntax.

  * [muTemplate#Features Features]
  * [muTemplate#Shipped_templates Shipped templates]
    * [muTemplate#Vim Vim]
    * [muTemplate#C_&_C++ C & C++]
    * [muTemplate#LaTeX LaTeX]
    * [muTemplate#XSLT XSLT]
    * [muTemplate#Other_filetypes Other filetypes]
  * [muTemplate#Examples Examples]
    * [muTemplate#C-_for_snippet C-`for` snippet]
    * [muTemplate#Interactive_template-file:_C++_Class_Template Interactive template-file: C++ Class Template]
    * [muTemplate#Completely_useless_recursive_example Completely useless recursive example]
  * [muTemplate#Download Download]
  * [muTemplate#Credits Credits]
  * [muTemplate#See_also See also]


== Features ==
  * Template-files can be expanded:
    * automatically when opening a new buffer (unless deactivated from the .vimrc),
    * explicitly through menus or the command line,
    * from the INSERT-mode in a snippet-like fashion ;
    * from the VISUAL-mode to surround the selection with a snippet ;
  * All snippets are defined in their own template-file ;
  * The template-files can be overridden by the user, or in the context of a specific project ;
  * Filetype specific snippets can be defined for the INSERT-mode (they can be inherited, e.g. C snippets can be used from C++, Java, _etc._), the list of matching snippets will be presented with a hint for each snippet ;
  * Computed VimL expressions can be inserted ;
  * VimL instructions can be executed during the expansion ;
  * Template-files can include other template-files in a function-like manner (parameters are even supported);
  * Fully integrated with my [lhBrackets placeholders-system] ;
  * Supports re-indentation (if desired) ; 
  * Works well with vim folding ;
  * I18n friendly ;
  * The expansion happens after any _[http://code.google.com/p/lh-vim/source/browse/misc/trunk/plugin/local_vimrc.vim local vimrcs]_ present are loaded -- in order to set project-specific variables before the expansion is done.

  * Thanks to [http://www.vim.org/scripts/script.php?script_id=3326 Tom Link's StakeHolders] plugin, µTemplate does now have tied placeholders (modifying one named placeholder modifies other placeholders with the same name). Not installing Stakeholders will not prevent you from using µTemplate.

However, it misses the following features:
  * Several snippets per template-file -- It's extremely unlikely that µtemplate will ever work this way.
  * One key that does everything: expansion of snippets/previously typed keywords/dictionary/..., or jump to the next placeholder depending on the context.

== Shipped templates ==
µTemplate is shipped by default with the following templates:

=== Vim ===

  * On creation of a new `.vim` file, the file is filled according to the kind of vim-script detected (from the directory where the new file is stored):
    * _autoload-plugins_ will contain a few debug oriented functions ;
    * _(plain) plugins_ will contain a global anti-reinclusion guard and its override variable (for maintenance purpose), an internal `s:k_version` number, and a few indications about what plugins should contain ;
    * _ft-plugins_ will contain a global and a local anti-reinclusion guard and their override variable (for maintenance purpose), an internal `s:k_version` number, and a few indications about what ft-plugins should contain ;
    * _local-vimrcs_ will look a lot like ft-plugin ;
    * otherwise, the file won't contain anything specific ;
    * *in all cases*:
      * a default header is filled with RCS tags (`$Id$`, `$Date$`), and other fields for the filename (kept relative to `{rtp}` when possible), the author/maintainer, the version, a short description, history, todo, _etc._ ;
      * `cpo&vim` is set for the duration of the script ;
      * a footer forces `foldmethod` to `marker`.
  All the choices made are the result of what I've come to consider over the years to be good practices regarding vim files contents.
  Each part may be individually overridden in your local settings (`:h MuT-paths-override`)

  * The snippets _foreach_, _fori_, and _loop-arg_ expand respectively to the `:for` vim-loop, or a `:while` vim-loop that increments _i_, or another index variable.

  * The snippet _plugmap_ expands into an overridable _plug-mapping_.

  * The snippet _autoload-debug_ expands into the debug-oriented functions added by default to autoload-plugins -- its purpose is to add simply those functions to autoload-plugins that don't have them yet.

  * The snippet _function_ expands into a `:function!` definition. If the current script is an autoload-plugin, the function name matches the autoload-plugin name -- to insert other kinds of functions, just use the `fu` abbreviation from `vim_snippets.vim`. Otherwise, the function name will just start with a `s:`.

  * On creation of a new vim help file (1), the file is pre-filed with:
    * a header compatible with what is expected by `:h local-additions`, your name, and a `$Date$`,
    * a default footer (`$Id`, copyright line, modeline, _etc._)
    * and two skeletons for the sections _Contents_, and _Presentation_.
  (1) Creating a new vim help file may require the following actions: 
{{{
:e ~/.vim/doc/foo.txt
:set ft=help
:MuTemplate
}}}


NB: there are no µTemplate snippets for `:if`, `:try`, _etc._ because they are maintained independently thanks to [lhBrackets my bracketing system] in `vim_snippets.vim` (todo: add link).

=== C & C++ ===
Most of my C and C++ template-files are shipped with [lhCpp lh-cpp]. However a few ones are still shipped with µTemplate:
  * On creation of a new C or C++ file, the file is filled according to the kind of file detected:
    * _header files_ first compute the relative current filename from the root of the current project, and contains a (-n overridable) file header, and adds automatically generated anti-reinclusion guards
    * _source files_ first compute the relative current filename from the root of the current project, and contains a (-n overridable) file header, and includes any matching _header file_ found (in the current directory, or any compatible directory when [http://code.google.com/p/lh-vim/source/browse/cpp/trunk/after/plugin/a.vim a.vim] is installed)

  * snippets for `main`, `for`, `for (int i`, `while`, `do...while`, `switch` and `case`, `if` ; NB: [lhCpp lh-cpp] defines alternative [lhCpp#Code_snippets smart-snippets for these control-statements], and several C++-only snippets in its [http://code.google.com/p/lh-vim/source/browse/#svn/cpp/trunk/after/template/cpp subversion repository]

=== LaTeX ===

Four snippets that are more a proof-of-concept than real snippets for intensive LaTeX editing are provided for:
  * `\begin{center}`, `\figure`
  * beamer frames

=== XSLT ===

Several snippets are provided for `attribute`, `for-each`, `if`, `otherwise`, `template match`, `template name`, `value-of`, and `when`

=== Other filetypes ===

Extremely simple template-files are provided for new cmake, perl, html, tcl, and for template-files files. 


== Examples == 

A few examples are better than a long speech, check the [http://code.google.com/p/lh-vim/source/browse/mu-template/trunk/doc/mu-template.txt documentation] for more precisions.

Note: all the default template-files shipped with mu-template can be browsed from the [http://code.google.com/p/lh-vim/source/browse/mu-template/trunk/after/template/ subversion repository]

=== C-`for` snippet ===
{{{
VimL: let s:value_start  = '¡'
VimL: let s:value_end    = '¡'
VimL: let s:reindent     = 1 
VimL: let s:marker_open  = '<+'
VimL: let s:marker_close = '+>'
for¡C_nl_before_bracket()¡(<+init+>;<+cond+>;<+iteration+>)¡C_nl_before_curlyB()¡{
    <+code+>
}<++>
}}}

=== Interactive template-file: C++ Class Template ===
{{{
VimL: let s:value_start = '¡'
VimL: let s:value_end   = '¡'
VimL: let s:reindent = 1
VimL: let s:marker_open  = '<+'
VimL: let s:marker_close = '+>'
VimL: let s:clsname = inputdialog("class name ?")
VimL: call CppDox_ClassWizard(s:clsname)
VimL:" CppDox_ClassWizard() asks what semantics the class will have 
VimL:" (value, entity, clonable, ...), and fills in all the g:CppDox_xxx variables
VimL:" used in this template-file.
VimL:"
/**
 * @brief <+brief+>
 *
 * <+doc+>
 *
 * <+@invariants+>
 *
 * <p><b>Semantics</b><br>
 ¡g:CppDox_semantics¡
 * <+ <li> sem+>
 *
 * @version ¡'$'¡revision$
 * ¡CppDox_author()¡
 */
class ¡s:clsname¡
¡g:CppDox_inherits¡
{
public:
    /**@name Construction/destruction
     */
    //@{
    ¡g:CppDox_constructors¡

    /**
     * ¡g:CppDox_isVirtualDest¡ Destructor.
     *
     ¡IF(strlen(g:CppDox_isVirtualDest), '', '* @warning this class is not meant to be publicly inherited')¡
     * @throw Nothing
     */
    ¡g:CppDox_isVirtualDest¡ ~¡s:clsname¡() ;
    //@}

    <+Other public functions+>;

    ¡IF(strlen(g:CppDox_protected_members), "protected:\n", '')¡
    ¡g:CppDox_protected_members¡

private:
    ¡g:CppDox_forbidden_members¡

    <+Private functions+>;

    <+Attributes+>;
};<++>
}}}

=== Completely useless recursive example ===
 * test.template
{{{
VimL: let s:value_start  = '¡'
VimL: let s:value_end    = '¡'
VimL: let s:marker_open  = '<+'
VimL: let s:marker_close = '+>'
VimL: let s:var = 1
BEGIN<++>
/*
 * ¡'$'¡Id$
 */
¡s:var¡
a¡s:var¡
¡s:var + 5¡a
a¡s:var¡a¡s:var¡
a¡s:var¡a¡s:var¡a
here <+we go+>
VimL: let s:msg =''
VimL: call s:Include('test-included')
VimL: let s:msg =' again'
VimL: call s:Include('test-included')

------
Some tests:
VimL: let s:expr = "first line\nsecond line\n "
text ¡s:expr¡
text
END
}}}
 * test-included.template
{{{
VimL: let s:times = exists('s:times') ? (s:times+1) : 1
This part has been included¡s:msg¡ ¡((s:times==1)?'once':(s:times==2 ? 'twice' : (s:times.' times')))¡.
VimL: if s:times <= 4 | call s:Include('test-included') | endif 
VimL: silent! unlet s:times
}}}


== Download ==
  * Requirements: Vim 7.+, [lhVimLib lh-vim-lib], [searchInRuntime], and my [lhBrackets bracketing-system]
  * As a vimball: ~~[http://lh-vim.googlecode.com/files/mu-template-2.3.0.vba here (v2.3.0)]~~
  * Checkout from the SVN repository
    {{{  
# Non-members may check out a read-only working copy anonymously over HTTP.
svn checkout http://lh-vim.googlecode.com/svn/mu-template/trunk/ mu-template-read-only
    }}}
  * Vim Addon Manager, install [http://code.google.com/p/lh-vim/source/browse/mu-template/trunk/mu-template-addon-info.txt mu-template@lh]. This is the preferred method because of the various dependencies. N.B.: installing [lhCpp lh-cpp] or [lhRefactor lh-refactor] with VAM will also install µtemplate.

== Credits ==
  * Gergely Kontra is the author of the first version of µTemplate
  * Luc Hermitte (LH) is the current maintainer of this enhanced version of mu-template
  * Robert Kelly IV, Zdenek Sekera for their insight and the feedback they provided me (LH).

== See also ==
There are many other template-files loaders for Vim, see the [http://vim.wikia.com/wiki/Category:Automated_Text_Insertion non exhaustive list of vim.wikia]