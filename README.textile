*Instructions*
* link vimrc to ~/.vimrc

*Included plugins*
* Abolish         (cr[c/m/_] to change case, :S/:%S for smart search/substitute, record abbreviations)
* Ack             (&lt;Leader&gt;a search repo, &lt;Leader&gt;K search help, output in quickfix)
* Arpeggio        (allows mapping two keys pressed) <-- unused
* BufOnly         (&lt;Leader&gt;bo removes all other open buffers)
* CtrlP           (&lt;Leader&gt;N to open window, quick find file in project, C-F switch type, C-Z/C-O to mark/open, C-V vsplit, CR opens)
* EasyMotion      (H and L to specify specific letter to go to, back/forward)
* Fswitch         (&lt;space&gt;h,hjklHJKL mappings to open source/header file)
* Fugitive        (&lt;Leader&gt;gs/gc/gd/gl/gp - status (- stage/unstage, p patch, C commit), commit, diff, log, push, diffput/get to stage/checkout, :Gedit)
* Git             (syntax highlighting for git)
* Latex-suite     (templates - &lt;Leader&gt;tt, macros - EEQ/SSS/`a/`D, F7 expands commands, F9 completes labels/cites, &lt;Leader&gt;ll compiles [visual]) <-- overkill
* Mash            (highlight current searched for term differently)
* MatchIt         (extends % to if/else/endif, can configure more matchpairs)
* NERDCommenter   (&lt;Leader&gt;c&lt;space&gt;/ci/cm/cb/cA)
* NERDTree        (&lt;Leader&gt;n opens directory tree, o, s, t to open/vsplit/tab, C changeroot, r refresh, I hidden files)
* Oper-Replace    (R is multipurpose replace command, Rib, "xR$, etc)
* Oper-User       (utility plugin for defining new operators)
* Powerline       (awesome statuslines, colored, symbols, really cool)
* Protodef        (&lt;space&gt;p/P to read prototypes from header file)
* Pydoc           (&lt;space&gt;d/D to bring up python doc for cursor word)
* Rainbow Paren.  (colored nested parentheses/brackets/etc)
* Repeat          (utility plugin to allow . to work for plugin mappings)
* RelOps          (modifies operators to display relative line numberings)
* Signature       (display marks, '] next mark, '] alphabetical order, m1/m! markers, m<space> toggle)
* SkyBison        (better command line, &lt;space&gt;; to display, cmap &lt;c-l&gt; to switch)
* Snipmate        (expands snippets after, date:tab:, for:tab: ifmain:tab: etc)
* Speeddating     (&lt;C-A&gt; and &lt;C-X&gt; increment/decrement times and dates, visual do ranges)
* Surround        (s text object when followed by bracket/tag/paren/quote/etc)
* Syntastic       (run checker on files on open/save-store in location list, [f, ]f for errors)
* Tabular         (&lt;Leader&gt;a=/a: to automatically align, |s autoalign tables)
* Tagbar          (better taglist, ;tl, o to toggle fold, space/enter)
* Textobj-Args    (defines argument text objects for functions)
* Textobj-Column  (text objects ac aC ic iC for manipulating blocks)
* Textobj-Entire  (defines entire buffer text objects, ae, ie)
* Textobj-Indent  (defines indent text objects, ai aI ii iI)
* Textobj-Line    (defines line text objects, al il)
* Textobj-User    (utility plugin for defining text objects)
* Tmux            (syntax highlighting and filetype recognition for tmux)
* Unimpaired      (consistent [ and ] motions, [&lt;space&gt; adds spaces, [e exchanges lines, [b buffer navigation)
* Vimux           (! and ;! run a tmux pane with new command/last command)

*Included colorscheme*
* IR_Black
 
*Language specific settings*
* Python
** jpythonfold script
** snippets - #!, docs, wh, cl, def, deff, defs, property, ld, ., try, ifmain, _, ae, from
** preview window on tab completion
** gd goes to function definition in module
** pydoc script, lookup in docs under cursor with K, &lt;space&gt;d/D
** can compile with and evaluate visual blocks with &lt;space&gt;d
** <space>b/B adds/removes breakpoints
** run file in left/below tmux window, pipe to less/column with &lt;space&gt;l/j, &lt;space&gt;[LJ]c/l
** X makes executable script
* C/C++
** &lt;space&gt;+c -> comment comment block beginning //- 
** &lt;space&gt;+C -> add end of block/#endif comment markers
** &lt;space&gt;+g/G -> color "#ifdef DEBUG" blocks as comments
** &lt;space&gt;+hf/hl/hL/... -> open corresponding header/source file in appropriate window
** &lt;space&gt;+p/P -> read prototypes from header file (cpp only)
** &lt;space&gt;+v/V -> selects inner/outer function
** surround with f/i/w (i.e., v:motion:Sf) to add for/if/while blocks around code
** snippets - c/cc/ch/cf/chh
* Objective-C
** &lt;space&gt;mF/mh/mH/... -> create GNUmakefile in appropriate window
** &lt;space&gt;R/rr/rc/rl -> run in tmux pane/remove nslog info/pipe to column/less)
* Ocaml, SML indent scripts
* LaTeX 

*Required programs*
* pdftotext, odt2txt, antiword, unrtf, python, ruby

*Compiling
* vim7.3 - @./configure --with-features=huge --enable-rubyinterp=yes --enable-pythoninterp=yes

vim:ft=textile:
